import datetime

from django.contrib.auth.models import User
from django.test import TestCase
from django.utils import timezone

from emr.models import *
from HealthNet.formhelper import *
from .forms import *
from django.test import TestCase
from HealthNet.viewhelper import *

def setup_environment():
    
    Hospital.objects.all().delete()
    User.objects.all().delete()
    Doctor.objects.all().delete()
    Patient.objects.all().delete()

    h = Hospital.objects.create(name="The Hospital")
    h.save()

    ud = User.objects.create_user(
                username="drstrange",  # cleaned_data is autogenerated data. can be modified in form
                password="pass",
                email="",
                first_name="Doctor",
                last_name="Strange"
            )
    ud.save()
    d = Doctor.objects.create(user=ud)
    d.hospitals.add(h)
    d.save()




    up = User.objects.create_user(
                username="patientzero",  # cleaned_data is autogenerated data. can be modified in form
                password="pass",
                email="",
                first_name="Patient",
                last_name="Zero")
    up.save()

    emr = EMR.objects.create()
    emr.save()

    p = Patient.objects.create(user=up, doctor = d, hospital=h, emr=emr)
    p.save()

    up = User.objects.create_user(
        username="patientone",  # cleaned_data is autogenerated data. can be modified in form
        password="pass",
        email="",
        first_name="Patient",
        last_name="One")
    up.save()

    emr = EMR.objects.create()
    emr.save()

    p = Patient.objects.create(user=up, doctor=d, hospital=h, emr=emr)
    p.save()


    un = User.objects.create_user(
                username="nursenormal",  # cleaned_data is autogenerated data. can be modified in form
                password="pass",
                email="",
                first_name="Nurse",
                last_name="Normal")
    un.save()
    n = Nurse.objects.create(user=un, hospital=h)
    n.save()

    return True
                             


class EventTest(TestCase):
    def test_setup_environment(self):
        """This test simply makes sure we can set up a database environment"""
        setup_environment()
        self.assertEqual(Doctor.objects.all().count(), 1)
        self.assertEqual(Nurse.objects.all().count(), 1)
        self.assertEqual(Patient.objects.all().count(), 2)
        self.assertEqual(User.objects.all().count(), 4)

    def test_event_conflict(self):
        """
        Tests the event validation method with conflicting events
        0 - No conflicts
        1 - The event is too long and extends into another event
        2 - The event starts before the end of another event
        NOTE: a buffer of 15 minuets is required between appointments
        """

        setup_environment()
        d = Doctor.objects.all()[0]
        h = d.hospitals.all()[0]
        p = Patient.objects.all()[0]
        st = timezone.now()
        et = st + datetime.timedelta(minutes=30)
        p1 = Patient.objects.all()[1]
        delta15 = datetime.timedelta(minutes=12)

        e = Event(doctor=d, patient=p, hospital=h, appointment=True,
                  description="an appointment", startTime=st, endTime=et)

        self.assertEqual(e.conflicts(), 0)
        e.save()
        self.assertEqual(Event.objects.all().count(), 1)

        e = Event(doctor=d, hospital=h, appointment=False,
                  description="not an appointment", startTime=st+delta15, endTime=et+delta15)

        self.assertEqual(e.conflicts(), 2)
        self.assertEqual(Event.objects.all().count(), 1)

        e = Event(doctor=d, patient=p1, hospital=h, appointment=False,
                  description="not an appointment", startTime=st-delta15, endTime=et-delta15)

        self.assertEqual(e.conflicts(), 1)
        self.assertEqual(Event.objects.all().count(), 1)


# class ViewHelperTest(TestCase):
#     def test_kvp_to_dict(self):
#         kvp = 'key1/1/key2/2'
#
#         dict = dict_from_url_kvp(kvp)
#
#         self.assertEqual(dict, {'key1': 1, 'key2': 2})
#
#
# class FormValidTest(TestCase):
#     def test_request_offset_validator(self):
#         test_form = EventCreationFormDoctor()
#
#         #Test with valid event
#         test_form.cleaned_data = {'startTime': timezone.now() + datetime.timedelta(seconds=-59)}
#         valid = EventCreationFormValidator.eventValidateRequestTimeingOffset(test_form, 1, 0, {}, {})
#         self.assertEqual(valid, True)
#
#         # Test with invalid event
#         test_form.cleaned_data = {'startTime': timezone.now() + datetime.timedelta(seconds=-61)}
#         valid = EventCreationFormValidator.eventValidateRequestTimeingOffset(test_form, 1, 0, {}, {})
#         self.assertEqual(valid, False)
#
#
# class FormHelpTest(TestCase):
#     def test_doctor_form_populate_dependant_fields(self):
#         """This tests the populate_dependant_fields method to determine if it returns false at the correct times"""
#         setup_environment()
#
#         d = Doctor.objects.all()[0]
#         p = Patient.objects.all()[0]
#         h = Hospital.objects.all()[0]
#
#         # Test doctor creation form with empty patient, selected hospital
#         doctor_form = EventCreationFormDoctor()
#         doctor_form.cleaned_data = {'type': '2'}
#         doctor_form.cleaned_data['hospital'] = None
#         doctor_form.cleaned_data['patient'] = None
#
#         self.assertEqual(populate_dependant_fields(doctor_form, d), True)
#
#         doctor_form.cleaned_data['hospital'] = h
#         doctor_form.cleaned_data['patient'] = None
#
#         self.assertEqual(populate_dependant_fields(doctor_form, d), True)
#
#         # Test doctor creation form with empty hosptial, selected patient
#         doctor_form.cleaned_data['hospital'] = None
#         doctor_form.cleaned_data['patient'] = p
#
#         self.assertEqual(populate_dependant_fields(doctor_form, d), True)
#
#         # Test doctor creation form with selected hosptial, selected patient
#         doctor_form.cleaned_data['hospital'] = h
#         doctor_form.cleaned_data['patient'] = p
#
#         self.assertEqual(populate_dependant_fields(doctor_form, d), False)
#
#     def test_nurse_form_populate_dependant_fields(self):
#         """This tests the populate_dependant_fields method to determine if it returns false at the correct times"""
#         setup_environment()
#
#         d = Doctor.objects.all()[0]
#         p = Patient.objects.all()[0]
#         n = Nurse.objects.all()[0]
#
#         # Test nurse creation form with empty patient, selected doctor
#         nurse_form = EventCreationFormNurse()
#         nurse_form.cleaned_data = {'type': '2'}
#         nurse_form.cleaned_data['doctor'] = None
#         nurse_form.cleaned_data['patient'] = None
#
#         self.assertEqual(populate_dependant_fields(nurse_form, n), True)
#
#         nurse_form.cleaned_data['doctor'] = d
#         nurse_form.cleaned_data['patient'] = None
#
#         self.assertEqual(populate_dependant_fields(nurse_form, n), True)
#
#         # Test nurse creation form with empty doctor, selected patient
#         nurse_form.cleaned_data['doctor'] = None
#         nurse_form.cleaned_data['patient'] = p
#
#         self.assertEqual(populate_dependant_fields(nurse_form, n), True)
#
#         # Test nurse creation form with selected doctor, selected patient
#         nurse_form.cleaned_data['doctor'] = d
#         nurse_form.cleaned_data['patient'] = p
#
#         self.assertEqual(populate_dependant_fields(nurse_form, n), False)


