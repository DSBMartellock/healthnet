from django.shortcuts import render
from user.models import *
from .forms import *
from django.contrib.auth.decorators import login_required
from django.contrib.auth import logout, authenticate, login
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.http import HttpResponseRedirect
from django.template import RequestContext
from django.shortcuts import render_to_response
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.views.generic import View
from HealthNet.viewhelper import getHealthUser

from django.contrib.auth.models import User
from syslogging.models import *
from user.models import *
from .forms import *

# Create your views here.

class Register(View):

    def post(self, request):
        form = None

        if dict_has_keys(['username', 'password1', 'password2'], request.POST):
            form = RegistrationFormFull(request.POST)

            if form.is_valid():
                user = User.objects.create_user(
                    username=form.cleaned_data['username'],
                    # cleaned_data is autogenerated data. can be modified in form
                    password=form.cleaned_data['password1'],
                )

                p = Patient.objects.create(user=user, insuranceNum=form.cleaned_data['insuranceNum'])
                p.save()

                user = authenticate(username=form.cleaned_data['username'], password=form.cleaned_data['password1'])
                login(request, user)

                Syslog.userCreate(p)
                return HttpResponseRedirect(reverse('user:eProfile' , args={user.pk}))
            else:

                request.session['message'] = "Something went wrong with your registration. Please make sure that all information you entered was valid."
                form = RegistrationForm(initial={'insuranceNum': request.POST['insuranceNum']})

        else:
            form = RegistrationForm(request.POST)
            if form.is_valid():
                form = RegistrationFormFull(initial={'insuranceNum': form.cleaned_data['insuranceNum']})


        if ('message' in request.session):
            return render(request, 'registration/register.html', {'form': form, 'message': request.session.pop('message')})
        else:
            return render(request, 'registration/register.html', {'form': form})

    def get(self, request):
        form = RegistrationForm()
        variables = RequestContext(request, {'form': form})
        return render(request, 'registration/register.html', variables)

class UserSelect(View):
    def post(self, request):
        form = UserSelectForm(request.POST)
        if form.is_valid():
            print(form.cleaned_data['typeOfUser'])
            if 'doctor' in form.cleaned_data['typeOfUser']:
                return HttpResponseRedirect(reverse('logIn:doctorRegister'))
            elif 'nurse' in form.cleaned_data['typeOfUser']:
                return HttpResponseRedirect(reverse('logIn:nurseRegister'))
        return render(request, 'registration/userSelect.html', {'form': form})

    def get(self, request):
        form = UserSelectForm()
        return render(request, 'registration/userSelect.html', {'form': form})

class DoctorRegister(View):
    def post(self, request):
        form = None

        if dict_has_keys(['username', 'password1', 'password2'], request.POST):
            form = DoctorRegistrationForm(request.POST)

            if form.is_valid():
                user = User.objects.create_user(
                    first_name=form.cleaned_data['firstName'],
                    last_name=form.cleaned_data['lastName'],
                    email=form.cleaned_data['email'],
                    username=form.cleaned_data['username'],
                    # cleaned_data is autogenerated data. can be modified in form
                    password=form.cleaned_data['password1'],
                )

                d = Doctor.objects.create(user=user)

                for hospital in form.cleaned_data['hospitals']:
                    d.hospitals.add(hospital)

                d.save()

                #user = authenticate(username=form.cleaned_data['username'], password=form.cleaned_data['password1'])
                #login(request, user)

                Syslog.userCreate(d)
                request.session[
                    'message'] = "You have successfully registered! However, you are not allowed to log into Healthnet until you are approved by your hospital administrator."
                hosads = HospitalAdmin.objects.none()
                for hos in d.hospitals.get_queryset():
                    hosads |= hos.hospitaladmin_set.all()

                for h in hosads:
                    Notification.push(h.user, "New Staff Approval Waiting", "", 'user:vProfile,{0}'.format(d.user.pk))
                return HttpResponseRedirect(reverse('login'))

        else:
            form = DoctorRegistrationForm(request.POST)

        if ('message' in request.session):
            return render(request, 'registration/doctorRegister.html', {'form': form, 'message': request.session.pop('message')})
        else:
            return render(request, 'registration/doctorRegister.html', {'form': form})

    def get(self, request):
        form = DoctorRegistrationForm()
        variables = RequestContext(request, {'form': form})
        return render(request, 'registration/doctorRegister.html', {'form': form}, variables)

class NurseRegister(View):
    def post(self, request):
        form = None

        if dict_has_keys(['username', 'password1', 'password2'], request.POST):
            form = NurseRegistrationForm(request.POST)

            if form.is_valid():
                user = User.objects.create_user(
                    first_name=form.cleaned_data['firstName'],
                    last_name=form.cleaned_data['lastName'],
                    email=form.cleaned_data['email'],
                    username=form.cleaned_data['username'],
                    # cleaned_data is autogenerated data. can be modified in form
                    password=form.cleaned_data['password1'],
                )

                n = Nurse.objects.create(user=user, hospital=form.cleaned_data['hospital'])
                n.save()

                Syslog.userCreate(n)
                request.session[
                    'message'] = "You have successfully registered! However, you are not allowed to log into Healthnet until you are approved by your hospital administrator."
                hosads = n.hospital.hospitaladmin_set.all()
                for h in hosads:
                    Notification.push(h.user, "New Staff Approval Waiting", "", 'user:vProfile,{0}'.format(n.user.pk))
                return HttpResponseRedirect(reverse('login'))

        else:
            form = RegistrationForm(request.POST)

        if ('message' in request.session):
            return render(request, 'registration/nurseRegister.html', {'form': form, 'message': request.session.pop('message')})
        else:
            return render(request, 'registration/nurseRegister.html', {'form': form})

    def get(self, request):
        form = NurseRegistrationForm()
        return render(request, 'registration/nurseRegister.html', {'form': form})

class LoginView(View):

    def post(self, request):
        if request.user.is_authenticated():
            return HttpResponseRedirect(reverse('user:dashboard'))

        form = LoginForm()

        if ('message' in request.session):
            #print(request.session.pop('message'))
            #code reaches here, and remembers message
            return render(request, 'logIn/index.html', {'form': form, 'message': request.session.pop('message')})

        lform = LoginForm(request.POST)

        if(lform.is_valid()):
            user = authenticate(username=lform.cleaned_data['username'], password=lform.cleaned_data['password'])

            if user is not None:
                if getHealthUser(user).getType() == 'doctor' or getHealthUser(user).getType() == 'nurse':
                    if getHealthUser(user).accepted == True:
                        login(request, user)
                        Syslog.userLogin(user)
                        return HttpResponseRedirect(reverse('user:dashboard'))
                    else:
                        #return HttpResponseRedirect(reverse('login'))
                        form = LoginForm()
                        message = "Your hospital admin has not authenticated you."
                        return render(request, 'logIn/index.html', {'message': message, 'form': form})
                login(request, user)
                Syslog.userLogin(user)
                return HttpResponseRedirect(reverse('user:dashboard'))

        message = "Something went wrong with your login, check if your username and password are correct."
        form = LoginForm()
        return render(request, 'logIn/index.html', {'message': message, 'form': form})
        #return HttpResponseRedirect(reverse('login'))

    def get(self, request):
        if request.user.is_authenticated():
            return HttpResponseRedirect(reverse('user:dashboard'))

        form = LoginForm()

        #message = "Something went wrong with your login, check if your username and password are correct."

        if ('message' in request.session):
            #print(request.session.pop('message'))
            return render(request, 'logIn/index.html', {'message': request.session.pop('message'), 'form': form})
        else:
            return render(request, 'logIn/index.html', {'form': form})


def register_success(request):
    return render_to_response('registration/success.html')

def logout_page(request):
    logout(request)
    return HttpResponseRedirect(reverse('login'))


@login_required
def home(request):
    return render_to_response('home.html',{'user': request.user })


