from django.test import TestCase
from syslogging.models import Syslog
from user.models import *
from hospital.models import Hospital
from emr.models import *
from django.contrib.auth.models import Permission, User
from django.contrib.auth import logout, authenticate, login

def login_as_patient():
    """This will use the login app to login as a patient, giving the tests patient url access"""
    return authenticate(username="pat", password="pass")

def login_as_doctor():
    """This will use the login app to login as a doctor"""
    return authenticate(username="doc", password="pass")

def login_as_nurse():
    """This will use the login app to login as a nurse"""
    return authenticate(username="nurse", password="pass")

def login_as_admin():
    """This will use the login app to login as a Hospital Admin"""
    return authenticate(username="hosadmin", password="pass")

# Following methods create generic users for the testing of thier creation

def create_new_hosptial():
    return Hospital.objects.create(name="H")

def create_new_doctor():
    h = create_new_hosptial()
    ud = User.objects.create_user(
            username="d",
            password="pass",
            email="",
            first_name="Doc",
            last_name="Martin")
    d = Doctor.objects.create(user=ud)
    d.hospitals.add(h)
    return d

def create_new_patient():
    h = create_new_hosptial()
    d = create_new_doctor()
    up = User.objects.create_user(
        username="p",
        password="pass",
        email="",
        first_name="Pat",
        last_name="Star")
    return Patient.objects.create(user=up, doctor=d, hospital=h)

def create_new_nurse():
    h = create_new_hosptial()
    un = User.objects.create_user(
        username="n",  # cleaned_data is autogenerated data. can be modified in form
        password="pass",
        email="",
        first_name="Nurse",
        last_name="Joy")
    return Nurse.objects.create(user=un, hospital=h)

def create_new_event():
    """Creates a new event for testing purposes"""
    d = Doctor.objects.all()[0]
    h = d.hospitals.all()[0]
    p = Patient.objects.all()[0]
    st = timezone.now()
    et = st + datetime.timedelta(minutes=30)
    eve = Event.objects.create(
        patient=p,
        doctor=d,
        hospital=h,
        appointment=True,
        description = "an appointment",
        startTime = st,
        endTime = et)
    return eve


class SystemLogCreationTest(TestCase):

    def setUp(self):
        """Create all basic users and data"""
        # ============= CREATE USERS =============
        # HOSPITAL
        h = Hospital.objects.create(name="The Hospital")
        # DOCTOR
        ud = User.objects.create_user(
            username="doc",
            password="pass",
            email="",
            first_name="Doc",
            last_name="Martin")
        d = Doctor.objects.create(user=ud)
        d.hospitals.add(h)
        # PATIENT
        up = User.objects.create_user(
            username="pat",
            password="pass",
            email="",
            first_name="Pat",
            last_name="Star")
        Patient.objects.create(user=up, doctor=d, hospital=h)
        # NURSE
        un = User.objects.create_user(
            username="nurse",
            password="pass",
            email="",
            first_name="Nurse",
            last_name="Joy")
        Nurse.objects.create(user=un, hospital=h)
        # HOSPTIAL ADMIN
        uha = User.objects.create_user(
            username="hosadmin",
            password="pass",
            email="",
            first_name="Kid",
            last_name="Cudi")
        HospitalAdmin.objects.create(user=uha, hospital=h)

    def test_patient_create_syslog(self):
        """The log that is created when a patient is created is verified"""
        num_syslog_items_before = Syslog.objects.all().count()
        Syslog.userCreate(create_new_patient())
        self.assertEqual(Syslog.objects.all().count(), (num_syslog_items_before+1))

    def test_appointment_create_syslog(self):
        """An appointment is created and the resulting log is verified"""
        num_syslog_items_before = Syslog.objects.all().count()
        Syslog.createEvent(create_new_event(), Patient.objects.all()[0])
        self.assertEqual(Syslog.objects.all().count(), (num_syslog_items_before + 1))

    def test_emr_view_create_syslog(self):
        """request the emr as an admin, ensure a syslog is created"""


    def test_patient_profile_view_syslog(self):
        """request a patients profile, ensure a syslog is created"""


    def test_patient_profile_update_syslog(self):
        """modify a patients proflile and ensure an syslog is created"""


    def test_transfer_patient_syslog(self):
        """Transfer a patient and ensure an syslog is created"""

    def test_admit_patient_syslog(self):
        """Admit a patient to a hospital and ensure syslog is created"""
